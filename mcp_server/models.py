# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T14:14:00+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel, conint, constr


class APIKey(RootModel[constr(pattern=r'.*\S.*', min_length=1, max_length=2048)]):
    root: constr(pattern=r'.*\S.*', min_length=1, max_length=2048)


class APIKeyVersion(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class Action(RootModel[str]):
    root: str


class ActionValue(Enum):
    ALLOW = 'ALLOW'
    BLOCK = 'BLOCK'
    COUNT = 'COUNT'
    CAPTCHA = 'CAPTCHA'
    CHALLENGE = 'CHALLENGE'
    EXCLUDED_AS_COUNT = 'EXCLUDED_AS_COUNT'


class All(BaseModel):
    pass


class AllQueryArguments(BaseModel):
    pass


class AssociateWebACLResponse(BaseModel):
    pass


class AssociatedResourceType(Enum):
    CLOUDFRONT = 'CLOUDFRONT'


class BodyParsingFallbackBehavior(Enum):
    MATCH = 'MATCH'
    NO_MATCH = 'NO_MATCH'
    EVALUATE_AS_STRING = 'EVALUATE_AS_STRING'


class Boolean(RootModel[bool]):
    root: bool


class CapacityUnit(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class ComparisonOperator(Enum):
    EQ = 'EQ'
    NE = 'NE'
    LE = 'LE'
    LT = 'LT'
    GE = 'GE'
    GT = 'GT'


class ConsumedCapacity(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class Country(RootModel[str]):
    root: str


class CountryCode(Enum):
    AF = 'AF'
    AX = 'AX'
    AL = 'AL'
    DZ = 'DZ'
    AS = 'AS'
    AD = 'AD'
    AO = 'AO'
    AI = 'AI'
    AQ = 'AQ'
    AG = 'AG'
    AR = 'AR'
    AM = 'AM'
    AW = 'AW'
    AU = 'AU'
    AT = 'AT'
    AZ = 'AZ'
    BS = 'BS'
    BH = 'BH'
    BD = 'BD'
    BB = 'BB'
    BY = 'BY'
    BE = 'BE'
    BZ = 'BZ'
    BJ = 'BJ'
    BM = 'BM'
    BT = 'BT'
    BO = 'BO'
    BQ = 'BQ'
    BA = 'BA'
    BW = 'BW'
    BV = 'BV'
    BR = 'BR'
    IO = 'IO'
    BN = 'BN'
    BG = 'BG'
    BF = 'BF'
    BI = 'BI'
    KH = 'KH'
    CM = 'CM'
    CA = 'CA'
    CV = 'CV'
    KY = 'KY'
    CF = 'CF'
    TD = 'TD'
    CL = 'CL'
    CN = 'CN'
    CX = 'CX'
    CC = 'CC'
    CO = 'CO'
    KM = 'KM'
    CG = 'CG'
    CD = 'CD'
    CK = 'CK'
    CR = 'CR'
    CI = 'CI'
    HR = 'HR'
    CU = 'CU'
    CW = 'CW'
    CY = 'CY'
    CZ = 'CZ'
    DK = 'DK'
    DJ = 'DJ'
    DM = 'DM'
    DO = 'DO'
    EC = 'EC'
    EG = 'EG'
    SV = 'SV'
    GQ = 'GQ'
    ER = 'ER'
    EE = 'EE'
    ET = 'ET'
    FK = 'FK'
    FO = 'FO'
    FJ = 'FJ'
    FI = 'FI'
    FR = 'FR'
    GF = 'GF'
    PF = 'PF'
    TF = 'TF'
    GA = 'GA'
    GM = 'GM'
    GE = 'GE'
    DE = 'DE'
    GH = 'GH'
    GI = 'GI'
    GR = 'GR'
    GL = 'GL'
    GD = 'GD'
    GP = 'GP'
    GU = 'GU'
    GT = 'GT'
    GG = 'GG'
    GN = 'GN'
    GW = 'GW'
    GY = 'GY'
    HT = 'HT'
    HM = 'HM'
    VA = 'VA'
    HN = 'HN'
    HK = 'HK'
    HU = 'HU'
    IS = 'IS'
    IN = 'IN'
    ID = 'ID'
    IR = 'IR'
    IQ = 'IQ'
    IE = 'IE'
    IM = 'IM'
    IL = 'IL'
    IT = 'IT'
    JM = 'JM'
    JP = 'JP'
    JE = 'JE'
    JO = 'JO'
    KZ = 'KZ'
    KE = 'KE'
    KI = 'KI'
    KP = 'KP'
    KR = 'KR'
    KW = 'KW'
    KG = 'KG'
    LA = 'LA'
    LV = 'LV'
    LB = 'LB'
    LS = 'LS'
    LR = 'LR'
    LY = 'LY'
    LI = 'LI'
    LT = 'LT'
    LU = 'LU'
    MO = 'MO'
    MK = 'MK'
    MG = 'MG'
    MW = 'MW'
    MY = 'MY'
    MV = 'MV'
    ML = 'ML'
    MT = 'MT'
    MH = 'MH'
    MQ = 'MQ'
    MR = 'MR'
    MU = 'MU'
    YT = 'YT'
    MX = 'MX'
    FM = 'FM'
    MD = 'MD'
    MC = 'MC'
    MN = 'MN'
    ME = 'ME'
    MS = 'MS'
    MA = 'MA'
    MZ = 'MZ'
    MM = 'MM'
    NA = 'NA'
    NR = 'NR'
    NP = 'NP'
    NL = 'NL'
    NC = 'NC'
    NZ = 'NZ'
    NI = 'NI'
    NE = 'NE'
    NG = 'NG'
    NU = 'NU'
    NF = 'NF'
    MP = 'MP'
    NO = 'NO'
    OM = 'OM'
    PK = 'PK'
    PW = 'PW'
    PS = 'PS'
    PA = 'PA'
    PG = 'PG'
    PY = 'PY'
    PE = 'PE'
    PH = 'PH'
    PN = 'PN'
    PL = 'PL'
    PT = 'PT'
    PR = 'PR'
    QA = 'QA'
    RE = 'RE'
    RO = 'RO'
    RU = 'RU'
    RW = 'RW'
    BL = 'BL'
    SH = 'SH'
    KN = 'KN'
    LC = 'LC'
    MF = 'MF'
    PM = 'PM'
    VC = 'VC'
    WS = 'WS'
    SM = 'SM'
    ST = 'ST'
    SA = 'SA'
    SN = 'SN'
    RS = 'RS'
    SC = 'SC'
    SL = 'SL'
    SG = 'SG'
    SX = 'SX'
    SK = 'SK'
    SI = 'SI'
    SB = 'SB'
    SO = 'SO'
    ZA = 'ZA'
    GS = 'GS'
    SS = 'SS'
    ES = 'ES'
    LK = 'LK'
    SD = 'SD'
    SR = 'SR'
    SJ = 'SJ'
    SZ = 'SZ'
    SE = 'SE'
    CH = 'CH'
    SY = 'SY'
    TW = 'TW'
    TJ = 'TJ'
    TZ = 'TZ'
    TH = 'TH'
    TL = 'TL'
    TG = 'TG'
    TK = 'TK'
    TO = 'TO'
    TT = 'TT'
    TN = 'TN'
    TR = 'TR'
    TM = 'TM'
    TC = 'TC'
    TV = 'TV'
    UG = 'UG'
    UA = 'UA'
    AE = 'AE'
    GB = 'GB'
    US = 'US'
    UM = 'UM'
    UY = 'UY'
    UZ = 'UZ'
    VU = 'VU'
    VE = 'VE'
    VN = 'VN'
    VG = 'VG'
    VI = 'VI'
    WF = 'WF'
    EH = 'EH'
    YE = 'YE'
    ZM = 'ZM'
    ZW = 'ZW'
    XK = 'XK'


class CountryCodes(RootModel[List[CountryCode]]):
    root: List[CountryCode] = Field(..., min_length=1)


class CreateAPIKeyResponse(BaseModel):
    APIKey_1: Optional[APIKey] = Field(None, alias='APIKey')


class CustomHTTPHeaderName(
    RootModel[constr(pattern=r'^[a-zA-Z0-9._$-]+$', min_length=1, max_length=64)]
):
    root: constr(pattern=r'^[a-zA-Z0-9._$-]+$', min_length=1, max_length=64)


class CustomHTTPHeaderValue(
    RootModel[constr(pattern=r'.*', min_length=1, max_length=255)]
):
    root: constr(pattern=r'.*', min_length=1, max_length=255)


class DeleteIPSetResponse(BaseModel):
    pass


class DeleteLoggingConfigurationResponse(BaseModel):
    pass


class DeletePermissionPolicyResponse(BaseModel):
    pass


class DeleteRegexPatternSetResponse(BaseModel):
    pass


class DeleteRuleGroupResponse(BaseModel):
    pass


class DeleteWebACLResponse(BaseModel):
    pass


class DisassociateWebACLResponse(BaseModel):
    pass


class DownloadUrl(RootModel[str]):
    root: str


class EntityDescription(
    RootModel[
        constr(
            pattern=r'^[\w+=:#@/\-,\.][\w+=:#@/\-,\.\s]+[\w+=:#@/\-,\.]$',
            min_length=1,
            max_length=256,
        )
    ]
):
    root: constr(
        pattern=r'^[\w+=:#@/\-,\.][\w+=:#@/\-,\.\s]+[\w+=:#@/\-,\.]$',
        min_length=1,
        max_length=256,
    )


class EntityId(
    RootModel[
        constr(
            pattern=r'^[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$',
            min_length=1,
            max_length=36,
        )
    ]
):
    root: constr(
        pattern=r'^[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$',
        min_length=1,
        max_length=36,
    )


class EntityName(RootModel[constr(pattern=r'^[\w\-]+$', min_length=1, max_length=128)]):
    root: constr(pattern=r'^[\w\-]+$', min_length=1, max_length=128)


class ExcludedRule(BaseModel):
    Name: EntityName


class ExcludedRules(RootModel[List[ExcludedRule]]):
    root: List[ExcludedRule] = Field(..., max_length=100)


class FailureCode(RootModel[conint(ge=0, le=999)]):
    root: conint(ge=0, le=999)


class FailureReason(Enum):
    TOKEN_MISSING = 'TOKEN_MISSING'
    TOKEN_EXPIRED = 'TOKEN_EXPIRED'
    TOKEN_INVALID = 'TOKEN_INVALID'
    TOKEN_DOMAIN_MISMATCH = 'TOKEN_DOMAIN_MISMATCH'


class FailureValue(RootModel[constr(pattern=r'.*\S.*', min_length=1, max_length=100)]):
    root: constr(pattern=r'.*\S.*', min_length=1, max_length=100)


class FallbackBehavior(Enum):
    MATCH = 'MATCH'
    NO_MATCH = 'NO_MATCH'


class FieldIdentifier(
    RootModel[constr(pattern=r'.*\S.*', min_length=1, max_length=512)]
):
    root: constr(pattern=r'.*\S.*', min_length=1, max_length=512)


class FieldToMatchData(
    RootModel[constr(pattern=r'.*\S.*', min_length=1, max_length=64)]
):
    root: constr(pattern=r'.*\S.*', min_length=1, max_length=64)


class FilterBehavior(Enum):
    KEEP = 'KEEP'
    DROP = 'DROP'


class FilterRequirement(Enum):
    MEETS_ALL = 'MEETS_ALL'
    MEETS_ANY = 'MEETS_ANY'


class ForwardedIPHeaderName(
    RootModel[constr(pattern=r'^[a-zA-Z0-9-]+$', min_length=1, max_length=255)]
):
    root: constr(pattern=r'^[a-zA-Z0-9-]+$', min_length=1, max_length=255)


class ForwardedIPPosition(Enum):
    FIRST = 'FIRST'
    LAST = 'LAST'
    ANY = 'ANY'


class GenerateMobileSdkReleaseUrlResponse(BaseModel):
    Url: Optional[DownloadUrl] = None


class HTTPMethod(RootModel[str]):
    root: str


class HTTPVersion(RootModel[str]):
    root: str


class HeaderName(RootModel[str]):
    root: str


class HeaderNames(RootModel[List[FieldToMatchData]]):
    root: List[FieldToMatchData] = Field(..., max_length=199, min_length=1)


class HeaderValue(RootModel[str]):
    root: str


class IPAddress(RootModel[constr(pattern=r'.*\S.*', min_length=1, max_length=50)]):
    root: constr(pattern=r'.*\S.*', min_length=1, max_length=50)


class IPAddressVersion(Enum):
    IPV4 = 'IPV4'
    IPV6 = 'IPV6'


class IPAddresses(RootModel[List[IPAddress]]):
    root: List[IPAddress]


class IPSetForwardedIPConfig(BaseModel):
    FallbackBehavior_1: FallbackBehavior = Field(..., alias='FallbackBehavior')
    HeaderName: ForwardedIPHeaderName
    Position: ForwardedIPPosition


class IPString(RootModel[str]):
    root: str


class InspectionLevel(Enum):
    COMMON = 'COMMON'
    TARGETED = 'TARGETED'


class JsonMatchScope(Enum):
    ALL = 'ALL'
    KEY = 'KEY'
    VALUE = 'VALUE'


class JsonPointerPath(
    RootModel[
        constr(pattern=r'([/])|([/](([^~])|(~[01]))+)', min_length=1, max_length=512)
    ]
):
    root: constr(pattern=r'([/])|([/](([^~])|(~[01]))+)', min_length=1, max_length=512)


class JsonPointerPaths(RootModel[List[JsonPointerPath]]):
    root: List[JsonPointerPath] = Field(..., min_length=1)


class LabelMatchKey(
    RootModel[constr(pattern=r'^[0-9A-Za-z_\-:]+$', min_length=1, max_length=1024)]
):
    root: constr(pattern=r'^[0-9A-Za-z_\-:]+$', min_length=1, max_length=1024)


class LabelMatchScope(Enum):
    LABEL = 'LABEL'
    NAMESPACE = 'NAMESPACE'


class LabelMatchStatement(BaseModel):
    Key: LabelMatchKey
    Scope: LabelMatchScope


class LabelName(
    RootModel[constr(pattern=r'^[0-9A-Za-z_\-:]+$', min_length=1, max_length=1024)]
):
    root: constr(pattern=r'^[0-9A-Za-z_\-:]+$', min_length=1, max_length=1024)


class LabelNameCondition(BaseModel):
    LabelName_1: LabelName = Field(..., alias='LabelName')


class LabelSummary(BaseModel):
    Name: Optional[LabelName] = None


class ListMaxItems(RootModel[conint(ge=1, le=500)]):
    root: conint(ge=1, le=500)


class LockToken(
    RootModel[
        constr(
            pattern=r'^[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$',
            min_length=1,
            max_length=36,
        )
    ]
):
    root: constr(
        pattern=r'^[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$',
        min_length=1,
        max_length=36,
    )


class LoginPathString(
    RootModel[constr(pattern=r'.*\S.*', min_length=1, max_length=256)]
):
    root: constr(pattern=r'.*\S.*', min_length=1, max_length=256)


class MapMatchScope(Enum):
    ALL = 'ALL'
    KEY = 'KEY'
    VALUE = 'VALUE'


class Method(BaseModel):
    pass


class MetricName(
    RootModel[constr(pattern=r'^[\w#:\.\-/]+$', min_length=1, max_length=255)]
):
    root: constr(pattern=r'^[\w#:\.\-/]+$', min_length=1, max_length=255)


class NextMarker(RootModel[constr(pattern=r'.*\S.*', min_length=1, max_length=256)]):
    root: constr(pattern=r'.*\S.*', min_length=1, max_length=256)


class NoneAction(BaseModel):
    pass


class OutputUrl(RootModel[str]):
    root: str


class OversizeHandling(Enum):
    CONTINUE = 'CONTINUE'
    MATCH = 'MATCH'
    NO_MATCH = 'NO_MATCH'


class PaginationLimit(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class PasswordField(BaseModel):
    Identifier: FieldIdentifier


class PayloadType(Enum):
    JSON = 'JSON'
    FORM_ENCODED = 'FORM_ENCODED'


class Platform(Enum):
    IOS = 'IOS'
    ANDROID = 'ANDROID'


class PolicyString(
    RootModel[constr(pattern=r'.*\S.*', min_length=1, max_length=395000)]
):
    root: constr(pattern=r'.*\S.*', min_length=1, max_length=395000)


class PopulationSize(RootModel[int]):
    root: int


class PositionalConstraint(Enum):
    EXACTLY = 'EXACTLY'
    STARTS_WITH = 'STARTS_WITH'
    ENDS_WITH = 'ENDS_WITH'
    CONTAINS = 'CONTAINS'
    CONTAINS_WORD = 'CONTAINS_WORD'


class PutManagedRuleSetVersionsResponse(BaseModel):
    NextLockToken: Optional[LockToken] = None


class PutPermissionPolicyResponse(BaseModel):
    pass


class QueryString(BaseModel):
    pass


class RateBasedStatementAggregateKeyType(Enum):
    IP = 'IP'
    FORWARDED_IP = 'FORWARDED_IP'


class RateBasedStatementManagedKeysIPSet(BaseModel):
    Addresses: Optional[IPAddresses] = None
    IPAddressVersion_1: Optional[IPAddressVersion] = Field(
        None, alias='IPAddressVersion'
    )


class RateLimit(RootModel[conint(ge=100, le=2000000000)]):
    root: conint(ge=100, le=2000000000)


class RegexPatternString(
    RootModel[constr(pattern=r'.*', min_length=1, max_length=512)]
):
    root: constr(pattern=r'.*', min_length=1, max_length=512)


class ReleaseNotes(RootModel[str]):
    root: str


class ResourceArn(RootModel[constr(pattern=r'.*\S.*', min_length=20, max_length=2048)]):
    root: constr(pattern=r'.*\S.*', min_length=20, max_length=2048)


class ResourceArns(RootModel[List[ResourceArn]]):
    root: List[ResourceArn]


class ResourceType(Enum):
    APPLICATION_LOAD_BALANCER = 'APPLICATION_LOAD_BALANCER'
    API_GATEWAY = 'API_GATEWAY'
    APPSYNC = 'APPSYNC'
    COGNITO_USER_POOL = 'COGNITO_USER_POOL'
    APP_RUNNER_SERVICE = 'APP_RUNNER_SERVICE'


class ResponseCode(RootModel[int]):
    root: int


class ResponseContent(
    RootModel[constr(pattern=r'[\s\S]*', min_length=1, max_length=10240)]
):
    root: constr(pattern=r'[\s\S]*', min_length=1, max_length=10240)


class ResponseContentType(Enum):
    TEXT_PLAIN = 'TEXT_PLAIN'
    TEXT_HTML = 'TEXT_HTML'
    APPLICATION_JSON = 'APPLICATION_JSON'


class ResponseInspectionBodyContainsFailureStrings(RootModel[List[FailureValue]]):
    root: List[FailureValue] = Field(..., max_length=5, min_length=1)


class ResponseInspectionHeaderFailureValues(RootModel[List[FailureValue]]):
    root: List[FailureValue] = Field(..., max_length=3, min_length=1)


class ResponseInspectionHeaderName(
    RootModel[constr(pattern=r'.*\S.*', min_length=1, max_length=200)]
):
    root: constr(pattern=r'.*\S.*', min_length=1, max_length=200)


class ResponseInspectionJsonFailureValues(RootModel[List[FailureValue]]):
    root: List[FailureValue] = Field(..., max_length=5, min_length=1)


class ResponseInspectionStatusCodeFailureCodes(RootModel[List[FailureCode]]):
    root: List[FailureCode] = Field(..., max_length=10, min_length=1)


class ResponseStatusCode(RootModel[conint(ge=200, le=599)]):
    root: conint(ge=200, le=599)


class RuleGroupSummary(BaseModel):
    ARN: Optional[ResourceArn] = None
    Description: Optional[EntityDescription] = None
    Id: Optional[EntityId] = None
    LockToken_1: Optional[LockToken] = Field(None, alias='LockToken')
    Name: Optional[EntityName] = None


class RulePriority(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class SampleWeight(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class Scope(Enum):
    CLOUDFRONT = 'CLOUDFRONT'
    REGIONAL = 'REGIONAL'


class SearchString(RootModel[str]):
    root: str


class SensitivityLevel(Enum):
    LOW = 'LOW'
    HIGH = 'HIGH'


class SingleCookieName(
    RootModel[constr(pattern=r'.*\S.*', min_length=1, max_length=60)]
):
    root: constr(pattern=r'.*\S.*', min_length=1, max_length=60)


class SingleHeader(BaseModel):
    Name: FieldToMatchData


class SingleQueryArgument(BaseModel):
    Name: FieldToMatchData


class Size(RootModel[conint(ge=0, le=21474836480)]):
    root: conint(ge=0, le=21474836480)


class SizeInspectionLimit(Enum):
    KB_16 = 'KB_16'
    KB_32 = 'KB_32'
    KB_48 = 'KB_48'
    KB_64 = 'KB_64'


class SolveTimestamp(RootModel[int]):
    root: int


class String(RootModel[str]):
    root: str


class SuccessCode(RootModel[conint(ge=0, le=999)]):
    root: conint(ge=0, le=999)


class SuccessValue(RootModel[constr(pattern=r'.*\S.*', min_length=1, max_length=100)]):
    root: constr(pattern=r'.*\S.*', min_length=1, max_length=100)


class TagKey(
    RootModel[
        constr(pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=128)
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=128
    )


class TagKeyList(RootModel[List[TagKey]]):
    root: List[TagKey] = Field(..., min_length=1)


class TagResourceResponse(BaseModel):
    pass


class TagValue(
    RootModel[
        constr(pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=0, max_length=256)
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=0, max_length=256
    )


class TextTransformationPriority(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class TextTransformationType(Enum):
    NONE = 'NONE'
    COMPRESS_WHITE_SPACE = 'COMPRESS_WHITE_SPACE'
    HTML_ENTITY_DECODE = 'HTML_ENTITY_DECODE'
    LOWERCASE = 'LOWERCASE'
    CMD_LINE = 'CMD_LINE'
    URL_DECODE = 'URL_DECODE'
    BASE64_DECODE = 'BASE64_DECODE'
    HEX_DECODE = 'HEX_DECODE'
    MD5 = 'MD5'
    REPLACE_COMMENTS = 'REPLACE_COMMENTS'
    ESCAPE_SEQ_DECODE = 'ESCAPE_SEQ_DECODE'
    SQL_HEX_DECODE = 'SQL_HEX_DECODE'
    CSS_DECODE = 'CSS_DECODE'
    JS_DECODE = 'JS_DECODE'
    NORMALIZE_PATH = 'NORMALIZE_PATH'
    NORMALIZE_PATH_WIN = 'NORMALIZE_PATH_WIN'
    REMOVE_NULLS = 'REMOVE_NULLS'
    REPLACE_NULLS = 'REPLACE_NULLS'
    BASE64_DECODE_EXT = 'BASE64_DECODE_EXT'
    URL_DECODE_UNI = 'URL_DECODE_UNI'
    UTF8_TO_UNICODE = 'UTF8_TO_UNICODE'


class TimeWindowDay(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class TimeWindowSecond(RootModel[conint(ge=60, le=259200)]):
    root: conint(ge=60, le=259200)


class Timestamp(RootModel[datetime]):
    root: datetime


class TokenDomain(
    RootModel[constr(pattern=r'^[\w\.\-/]+$', min_length=1, max_length=253)]
):
    root: constr(pattern=r'^[\w\.\-/]+$', min_length=1, max_length=253)


class TokenDomains(RootModel[List[TokenDomain]]):
    root: List[TokenDomain]


class URIString(RootModel[str]):
    root: str


class UntagResourceRequest(BaseModel):
    ResourceARN: ResourceArn
    TagKeys: TagKeyList


class UntagResourceResponse(BaseModel):
    pass


class UpdateIPSetRequest(BaseModel):
    Addresses: IPAddresses
    Description: Optional[EntityDescription] = None
    Id: EntityId
    LockToken_1: LockToken = Field(..., alias='LockToken')
    Name: EntityName
    Scope_1: Scope = Field(..., alias='Scope')


class UpdateIPSetResponse(BaseModel):
    NextLockToken: Optional[LockToken] = None


class UpdateRegexPatternSetResponse(BaseModel):
    NextLockToken: Optional[LockToken] = None


class UpdateRuleGroupResponse(BaseModel):
    NextLockToken: Optional[LockToken] = None


class UpdateWebACLResponse(BaseModel):
    NextLockToken: Optional[LockToken] = None


class UriPath(BaseModel):
    pass


class UsernameField(BaseModel):
    Identifier: FieldIdentifier


class VendorName(RootModel[constr(pattern=r'.*\S.*', min_length=1, max_length=128)]):
    root: constr(pattern=r'.*\S.*', min_length=1, max_length=128)


class VersionKeyString(
    RootModel[constr(pattern=r'^[\w#:\.\-/]+$', min_length=1, max_length=64)]
):
    root: constr(pattern=r'^[\w#:\.\-/]+$', min_length=1, max_length=64)


class VersionToPublish(BaseModel):
    AssociatedRuleGroupArn: Optional[ResourceArn] = None
    ForecastedLifetime: Optional[TimeWindowDay] = None


class VersionsToPublish(RootModel[Optional[Dict[str, VersionToPublish]]]):
    root: Optional[Dict[str, VersionToPublish]] = None


class VisibilityConfig(BaseModel):
    CloudWatchMetricsEnabled: Boolean
    MetricName_1: MetricName = Field(..., alias='MetricName')
    SampledRequestsEnabled: Boolean


class WAFAssociatedItemException(RootModel[Any]):
    root: Any


class WAFConfigurationWarningException(RootModel[Any]):
    root: Any


class WAFDuplicateItemException(RootModel[Any]):
    root: Any


class WAFExpiredManagedRuleGroupVersionException(RootModel[Any]):
    root: Any


class WAFInternalErrorException(RootModel[Any]):
    root: Any


class WAFInvalidOperationException(RootModel[Any]):
    root: Any


class WAFInvalidParameterException(RootModel[Any]):
    root: Any


class WAFInvalidPermissionPolicyException(RootModel[Any]):
    root: Any


class WAFInvalidResourceException(RootModel[Any]):
    root: Any


class WAFLimitsExceededException(RootModel[Any]):
    root: Any


class WAFLogDestinationPermissionIssueException(RootModel[Any]):
    root: Any


class WAFNonexistentItemException(RootModel[Any]):
    root: Any


class WAFOptimisticLockException(RootModel[Any]):
    root: Any


class WAFServiceLinkedRoleErrorException(RootModel[Any]):
    root: Any


class WAFSubscriptionNotFoundException(RootModel[Any]):
    root: Any


class WAFTagOperationException(RootModel[Any]):
    root: Any


class WAFTagOperationInternalErrorException(RootModel[Any]):
    root: Any


class WAFUnavailableEntityException(RootModel[Any]):
    root: Any


class WebACLSummary(BaseModel):
    ARN: Optional[ResourceArn] = None
    Description: Optional[EntityDescription] = None
    Id: Optional[EntityId] = None
    LockToken_1: Optional[LockToken] = Field(None, alias='LockToken')
    Name: Optional[EntityName] = None


class XAmzTarget(Enum):
    AWSWAF_20190729_AssociateWebACL = 'AWSWAF_20190729.AssociateWebACL'


class XAmzTarget1(Enum):
    AWSWAF_20190729_CheckCapacity = 'AWSWAF_20190729.CheckCapacity'


class XAmzTarget2(Enum):
    AWSWAF_20190729_CreateAPIKey = 'AWSWAF_20190729.CreateAPIKey'


class XAmzTarget3(Enum):
    AWSWAF_20190729_CreateIPSet = 'AWSWAF_20190729.CreateIPSet'


class XAmzTarget4(Enum):
    AWSWAF_20190729_CreateRegexPatternSet = 'AWSWAF_20190729.CreateRegexPatternSet'


class XAmzTarget5(Enum):
    AWSWAF_20190729_CreateRuleGroup = 'AWSWAF_20190729.CreateRuleGroup'


class XAmzTarget6(Enum):
    AWSWAF_20190729_CreateWebACL = 'AWSWAF_20190729.CreateWebACL'


class XAmzTarget7(Enum):
    AWSWAF_20190729_DeleteFirewallManagerRuleGroups = (
        'AWSWAF_20190729.DeleteFirewallManagerRuleGroups'
    )


class XAmzTarget8(Enum):
    AWSWAF_20190729_DeleteIPSet = 'AWSWAF_20190729.DeleteIPSet'


class XAmzTarget9(Enum):
    AWSWAF_20190729_DeleteLoggingConfiguration = (
        'AWSWAF_20190729.DeleteLoggingConfiguration'
    )


class XAmzTarget10(Enum):
    AWSWAF_20190729_DeletePermissionPolicy = 'AWSWAF_20190729.DeletePermissionPolicy'


class XAmzTarget11(Enum):
    AWSWAF_20190729_DeleteRegexPatternSet = 'AWSWAF_20190729.DeleteRegexPatternSet'


class XAmzTarget12(Enum):
    AWSWAF_20190729_DeleteRuleGroup = 'AWSWAF_20190729.DeleteRuleGroup'


class XAmzTarget13(Enum):
    AWSWAF_20190729_DeleteWebACL = 'AWSWAF_20190729.DeleteWebACL'


class XAmzTarget14(Enum):
    AWSWAF_20190729_DescribeManagedRuleGroup = (
        'AWSWAF_20190729.DescribeManagedRuleGroup'
    )


class XAmzTarget15(Enum):
    AWSWAF_20190729_DisassociateWebACL = 'AWSWAF_20190729.DisassociateWebACL'


class XAmzTarget16(Enum):
    AWSWAF_20190729_GenerateMobileSdkReleaseUrl = (
        'AWSWAF_20190729.GenerateMobileSdkReleaseUrl'
    )


class XAmzTarget17(Enum):
    AWSWAF_20190729_GetDecryptedAPIKey = 'AWSWAF_20190729.GetDecryptedAPIKey'


class XAmzTarget18(Enum):
    AWSWAF_20190729_GetIPSet = 'AWSWAF_20190729.GetIPSet'


class XAmzTarget19(Enum):
    AWSWAF_20190729_GetLoggingConfiguration = 'AWSWAF_20190729.GetLoggingConfiguration'


class XAmzTarget20(Enum):
    AWSWAF_20190729_GetManagedRuleSet = 'AWSWAF_20190729.GetManagedRuleSet'


class XAmzTarget21(Enum):
    AWSWAF_20190729_GetMobileSdkRelease = 'AWSWAF_20190729.GetMobileSdkRelease'


class XAmzTarget22(Enum):
    AWSWAF_20190729_GetPermissionPolicy = 'AWSWAF_20190729.GetPermissionPolicy'


class XAmzTarget23(Enum):
    AWSWAF_20190729_GetRateBasedStatementManagedKeys = (
        'AWSWAF_20190729.GetRateBasedStatementManagedKeys'
    )


class XAmzTarget24(Enum):
    AWSWAF_20190729_GetRegexPatternSet = 'AWSWAF_20190729.GetRegexPatternSet'


class XAmzTarget25(Enum):
    AWSWAF_20190729_GetRuleGroup = 'AWSWAF_20190729.GetRuleGroup'


class XAmzTarget26(Enum):
    AWSWAF_20190729_GetSampledRequests = 'AWSWAF_20190729.GetSampledRequests'


class XAmzTarget27(Enum):
    AWSWAF_20190729_GetWebACL = 'AWSWAF_20190729.GetWebACL'


class XAmzTarget28(Enum):
    AWSWAF_20190729_GetWebACLForResource = 'AWSWAF_20190729.GetWebACLForResource'


class XAmzTarget29(Enum):
    AWSWAF_20190729_ListAPIKeys = 'AWSWAF_20190729.ListAPIKeys'


class XAmzTarget30(Enum):
    AWSWAF_20190729_ListAvailableManagedRuleGroupVersions = (
        'AWSWAF_20190729.ListAvailableManagedRuleGroupVersions'
    )


class XAmzTarget31(Enum):
    AWSWAF_20190729_ListAvailableManagedRuleGroups = (
        'AWSWAF_20190729.ListAvailableManagedRuleGroups'
    )


class XAmzTarget32(Enum):
    AWSWAF_20190729_ListIPSets = 'AWSWAF_20190729.ListIPSets'


class XAmzTarget33(Enum):
    AWSWAF_20190729_ListLoggingConfigurations = (
        'AWSWAF_20190729.ListLoggingConfigurations'
    )


class XAmzTarget34(Enum):
    AWSWAF_20190729_ListManagedRuleSets = 'AWSWAF_20190729.ListManagedRuleSets'


class XAmzTarget35(Enum):
    AWSWAF_20190729_ListMobileSdkReleases = 'AWSWAF_20190729.ListMobileSdkReleases'


class XAmzTarget36(Enum):
    AWSWAF_20190729_ListRegexPatternSets = 'AWSWAF_20190729.ListRegexPatternSets'


class XAmzTarget37(Enum):
    AWSWAF_20190729_ListResourcesForWebACL = 'AWSWAF_20190729.ListResourcesForWebACL'


class XAmzTarget38(Enum):
    AWSWAF_20190729_ListRuleGroups = 'AWSWAF_20190729.ListRuleGroups'


class XAmzTarget39(Enum):
    AWSWAF_20190729_ListTagsForResource = 'AWSWAF_20190729.ListTagsForResource'


class XAmzTarget40(Enum):
    AWSWAF_20190729_ListWebACLs = 'AWSWAF_20190729.ListWebACLs'


class XAmzTarget41(Enum):
    AWSWAF_20190729_PutLoggingConfiguration = 'AWSWAF_20190729.PutLoggingConfiguration'


class XAmzTarget42(Enum):
    AWSWAF_20190729_PutManagedRuleSetVersions = (
        'AWSWAF_20190729.PutManagedRuleSetVersions'
    )


class XAmzTarget43(Enum):
    AWSWAF_20190729_PutPermissionPolicy = 'AWSWAF_20190729.PutPermissionPolicy'


class XAmzTarget44(Enum):
    AWSWAF_20190729_TagResource = 'AWSWAF_20190729.TagResource'


class XAmzTarget45(Enum):
    AWSWAF_20190729_UntagResource = 'AWSWAF_20190729.UntagResource'


class XAmzTarget46(Enum):
    AWSWAF_20190729_UpdateIPSet = 'AWSWAF_20190729.UpdateIPSet'


class XAmzTarget47(Enum):
    AWSWAF_20190729_UpdateManagedRuleSetVersionExpiryDate = (
        'AWSWAF_20190729.UpdateManagedRuleSetVersionExpiryDate'
    )


class XAmzTarget48(Enum):
    AWSWAF_20190729_UpdateRegexPatternSet = 'AWSWAF_20190729.UpdateRegexPatternSet'


class XAmzTarget49(Enum):
    AWSWAF_20190729_UpdateRuleGroup = 'AWSWAF_20190729.UpdateRuleGroup'


class XAmzTarget50(Enum):
    AWSWAF_20190729_UpdateWebACL = 'AWSWAF_20190729.UpdateWebACL'


class APIKeySummary(BaseModel):
    APIKey_1: Optional[APIKey] = Field(None, alias='APIKey')
    CreationTimestamp: Optional[Timestamp] = None
    TokenDomains_1: Optional[TokenDomains] = Field(None, alias='TokenDomains')
    Version: Optional[APIKeyVersion] = None


class APIKeyTokenDomains(RootModel[List[TokenDomain]]):
    root: List[TokenDomain] = Field(..., min_length=1)


class AWSManagedRulesBotControlRuleSet(BaseModel):
    InspectionLevel_1: InspectionLevel = Field(..., alias='InspectionLevel')


class ActionCondition(BaseModel):
    Action: ActionValue


class AssociateWebACLRequest(BaseModel):
    ResourceArn_1: ResourceArn = Field(..., alias='ResourceArn')
    WebACLArn: ResourceArn


class Body(BaseModel):
    OversizeHandling_1: Optional[OversizeHandling] = Field(
        None, alias='OversizeHandling'
    )


class CaptchaResponse(BaseModel):
    FailureReason_1: Optional[FailureReason] = Field(None, alias='FailureReason')
    ResponseCode_1: Optional[ResponseCode] = Field(None, alias='ResponseCode')
    SolveTimestamp_1: Optional[SolveTimestamp] = Field(None, alias='SolveTimestamp')


class ChallengeResponse(BaseModel):
    FailureReason_1: Optional[FailureReason] = Field(None, alias='FailureReason')
    ResponseCode_1: Optional[ResponseCode] = Field(None, alias='ResponseCode')
    SolveTimestamp_1: Optional[SolveTimestamp] = Field(None, alias='SolveTimestamp')


class CheckCapacityResponse(BaseModel):
    Capacity: Optional[ConsumedCapacity] = None


class Condition(BaseModel):
    ActionCondition_1: Optional[ActionCondition] = Field(None, alias='ActionCondition')
    LabelNameCondition_1: Optional[LabelNameCondition] = Field(
        None, alias='LabelNameCondition'
    )


class Conditions(RootModel[List[Condition]]):
    root: List[Condition] = Field(..., min_length=1)


class CookieNames(RootModel[List[SingleCookieName]]):
    root: List[SingleCookieName] = Field(..., max_length=199, min_length=1)


class CreateAPIKeyRequest(BaseModel):
    Scope_1: Scope = Field(..., alias='Scope')
    TokenDomains: APIKeyTokenDomains


class CreateRuleGroupResponse(BaseModel):
    Summary: Optional[RuleGroupSummary] = None


class CreateWebACLResponse(BaseModel):
    Summary: Optional[WebACLSummary] = None


class CustomHTTPHeader(BaseModel):
    Name: CustomHTTPHeaderName
    Value: CustomHTTPHeaderValue


class CustomHTTPHeaders(RootModel[List[CustomHTTPHeader]]):
    root: List[CustomHTTPHeader] = Field(..., min_length=1)


class CustomRequestHandling(BaseModel):
    InsertHeaders: CustomHTTPHeaders


class CustomResponse(BaseModel):
    CustomResponseBodyKey: Optional[EntityName] = None
    ResponseCode: ResponseStatusCode
    ResponseHeaders: Optional[CustomHTTPHeaders] = None


class CustomResponseBody(BaseModel):
    Content: ResponseContent
    ContentType: ResponseContentType


class DeleteFirewallManagerRuleGroupsRequest(BaseModel):
    WebACLArn: ResourceArn
    WebACLLockToken: LockToken


class DeleteFirewallManagerRuleGroupsResponse(BaseModel):
    NextWebACLLockToken: Optional[LockToken] = None


class DeleteIPSetRequest(BaseModel):
    Id: EntityId
    LockToken_1: LockToken = Field(..., alias='LockToken')
    Name: EntityName
    Scope_1: Scope = Field(..., alias='Scope')


class DeleteLoggingConfigurationRequest(BaseModel):
    ResourceArn_1: ResourceArn = Field(..., alias='ResourceArn')


class DeletePermissionPolicyRequest(BaseModel):
    ResourceArn_1: ResourceArn = Field(..., alias='ResourceArn')


class DeleteRegexPatternSetRequest(BaseModel):
    Id: EntityId
    LockToken_1: LockToken = Field(..., alias='LockToken')
    Name: EntityName
    Scope_1: Scope = Field(..., alias='Scope')


class DeleteRuleGroupRequest(BaseModel):
    Id: EntityId
    LockToken_1: LockToken = Field(..., alias='LockToken')
    Name: EntityName
    Scope_1: Scope = Field(..., alias='Scope')


class DeleteWebACLRequest(BaseModel):
    Id: EntityId
    LockToken_1: LockToken = Field(..., alias='LockToken')
    Name: EntityName
    Scope_1: Scope = Field(..., alias='Scope')


class DescribeManagedRuleGroupRequest(BaseModel):
    Name: EntityName
    Scope_1: Scope = Field(..., alias='Scope')
    VendorName_1: VendorName = Field(..., alias='VendorName')
    VersionName: Optional[VersionKeyString] = None


class DisassociateWebACLRequest(BaseModel):
    ResourceArn_1: ResourceArn = Field(..., alias='ResourceArn')


class Filter(BaseModel):
    Behavior: FilterBehavior
    Conditions_1: Conditions = Field(..., alias='Conditions')
    Requirement: FilterRequirement


class Filters(RootModel[List[Filter]]):
    root: List[Filter] = Field(..., min_length=1)


class ForwardedIPConfig(BaseModel):
    FallbackBehavior_1: FallbackBehavior = Field(..., alias='FallbackBehavior')
    HeaderName: ForwardedIPHeaderName


class GenerateMobileSdkReleaseUrlRequest(BaseModel):
    Platform_1: Platform = Field(..., alias='Platform')
    ReleaseVersion: VersionKeyString


class GeoMatchStatement(BaseModel):
    CountryCodes_1: Optional[CountryCodes] = Field(None, alias='CountryCodes')
    ForwardedIPConfig_1: Optional[ForwardedIPConfig] = Field(
        None, alias='ForwardedIPConfig'
    )


class GetDecryptedAPIKeyRequest(BaseModel):
    APIKey_1: APIKey = Field(..., alias='APIKey')
    Scope_1: Scope = Field(..., alias='Scope')


class GetDecryptedAPIKeyResponse(BaseModel):
    CreationTimestamp: Optional[Timestamp] = None
    TokenDomains_1: Optional[TokenDomains] = Field(None, alias='TokenDomains')


class GetIPSetRequest(BaseModel):
    Id: EntityId
    Name: EntityName
    Scope_1: Scope = Field(..., alias='Scope')


class GetLoggingConfigurationRequest(BaseModel):
    ResourceArn_1: ResourceArn = Field(..., alias='ResourceArn')


class GetManagedRuleSetRequest(BaseModel):
    Id: EntityId
    Name: EntityName
    Scope_1: Scope = Field(..., alias='Scope')


class GetMobileSdkReleaseRequest(BaseModel):
    Platform_1: Platform = Field(..., alias='Platform')
    ReleaseVersion: VersionKeyString


class GetPermissionPolicyRequest(BaseModel):
    ResourceArn_1: ResourceArn = Field(..., alias='ResourceArn')


class GetPermissionPolicyResponse(BaseModel):
    Policy: Optional[PolicyString] = None


class GetRateBasedStatementManagedKeysRequest(BaseModel):
    RuleGroupRuleName: Optional[EntityName] = None
    RuleName: EntityName
    Scope_1: Scope = Field(..., alias='Scope')
    WebACLId: EntityId
    WebACLName: EntityName


class GetRateBasedStatementManagedKeysResponse(BaseModel):
    ManagedKeysIPV4: Optional[RateBasedStatementManagedKeysIPSet] = None
    ManagedKeysIPV6: Optional[RateBasedStatementManagedKeysIPSet] = None


class GetRegexPatternSetRequest(BaseModel):
    Id: EntityId
    Name: EntityName
    Scope_1: Scope = Field(..., alias='Scope')


class GetRuleGroupRequest(BaseModel):
    ARN: Optional[ResourceArn] = None
    Id: Optional[EntityId] = None
    Name: Optional[EntityName] = None
    Scope_1: Optional[Scope] = Field(None, alias='Scope')


class GetWebACLForResourceRequest(BaseModel):
    ResourceArn_1: ResourceArn = Field(..., alias='ResourceArn')


class GetWebACLRequest(BaseModel):
    Id: EntityId
    Name: EntityName
    Scope_1: Scope = Field(..., alias='Scope')


class HTTPHeader(BaseModel):
    Name: Optional[HeaderName] = None
    Value: Optional[HeaderValue] = None


class HTTPHeaders(RootModel[List[HTTPHeader]]):
    root: List[HTTPHeader]


class HTTPRequest(BaseModel):
    ClientIP: Optional[IPString] = None
    Country_1: Optional[Country] = Field(None, alias='Country')
    HTTPVersion_1: Optional[HTTPVersion] = Field(None, alias='HTTPVersion')
    Headers: Optional[HTTPHeaders] = None
    Method: Optional[HTTPMethod] = None
    URI: Optional[URIString] = None


class HeaderMatchPattern(BaseModel):
    All_1: Optional[All] = Field(None, alias='All')
    ExcludedHeaders: Optional[HeaderNames] = None
    IncludedHeaders: Optional[HeaderNames] = None


class Headers(BaseModel):
    MatchPattern: HeaderMatchPattern
    MatchScope: MapMatchScope
    OversizeHandling_1: OversizeHandling = Field(..., alias='OversizeHandling')


class IPSet(BaseModel):
    ARN: ResourceArn
    Addresses: IPAddresses
    Description: Optional[EntityDescription] = None
    IPAddressVersion_1: IPAddressVersion = Field(..., alias='IPAddressVersion')
    Id: EntityId
    Name: EntityName


class IPSetReferenceStatement(BaseModel):
    ARN: ResourceArn
    IPSetForwardedIPConfig_1: Optional[IPSetForwardedIPConfig] = Field(
        None, alias='IPSetForwardedIPConfig'
    )


class IPSetSummary(BaseModel):
    ARN: Optional[ResourceArn] = None
    Description: Optional[EntityDescription] = None
    Id: Optional[EntityId] = None
    LockToken_1: Optional[LockToken] = Field(None, alias='LockToken')
    Name: Optional[EntityName] = None


class ImmunityTimeProperty(BaseModel):
    ImmunityTime: TimeWindowSecond


class JsonMatchPattern(BaseModel):
    All_1: Optional[All] = Field(None, alias='All')
    IncludedPaths: Optional[JsonPointerPaths] = None


class Label(BaseModel):
    Name: LabelName


class LabelSummaries(RootModel[List[LabelSummary]]):
    root: List[LabelSummary]


class Labels(RootModel[List[Label]]):
    root: List[Label]


class ListAPIKeysRequest(BaseModel):
    Limit: Optional[PaginationLimit] = None
    NextMarker_1: Optional[NextMarker] = Field(None, alias='NextMarker')
    Scope_1: Scope = Field(..., alias='Scope')


class ListAvailableManagedRuleGroupVersionsRequest(BaseModel):
    Limit: Optional[PaginationLimit] = None
    Name: EntityName
    NextMarker_1: Optional[NextMarker] = Field(None, alias='NextMarker')
    Scope_1: Scope = Field(..., alias='Scope')
    VendorName_1: VendorName = Field(..., alias='VendorName')


class ListAvailableManagedRuleGroupsRequest(BaseModel):
    Limit: Optional[PaginationLimit] = None
    NextMarker_1: Optional[NextMarker] = Field(None, alias='NextMarker')
    Scope_1: Scope = Field(..., alias='Scope')


class ListIPSetsRequest(BaseModel):
    Limit: Optional[PaginationLimit] = None
    NextMarker_1: Optional[NextMarker] = Field(None, alias='NextMarker')
    Scope_1: Scope = Field(..., alias='Scope')


class ListLoggingConfigurationsRequest(BaseModel):
    Limit: Optional[PaginationLimit] = None
    NextMarker_1: Optional[NextMarker] = Field(None, alias='NextMarker')
    Scope_1: Scope = Field(..., alias='Scope')


class ListManagedRuleSetsRequest(BaseModel):
    Limit: Optional[PaginationLimit] = None
    NextMarker_1: Optional[NextMarker] = Field(None, alias='NextMarker')
    Scope_1: Scope = Field(..., alias='Scope')


class ListMobileSdkReleasesRequest(BaseModel):
    Limit: Optional[PaginationLimit] = None
    NextMarker_1: Optional[NextMarker] = Field(None, alias='NextMarker')
    Platform_1: Platform = Field(..., alias='Platform')


class ListRegexPatternSetsRequest(BaseModel):
    Limit: Optional[PaginationLimit] = None
    NextMarker_1: Optional[NextMarker] = Field(None, alias='NextMarker')
    Scope_1: Scope = Field(..., alias='Scope')


class ListResourcesForWebACLRequest(BaseModel):
    ResourceType_1: Optional[ResourceType] = Field(None, alias='ResourceType')
    WebACLArn: ResourceArn


class ListResourcesForWebACLResponse(BaseModel):
    ResourceArns_1: Optional[ResourceArns] = Field(None, alias='ResourceArns')


class ListRuleGroupsRequest(BaseModel):
    Limit: Optional[PaginationLimit] = None
    NextMarker_1: Optional[NextMarker] = Field(None, alias='NextMarker')
    Scope_1: Scope = Field(..., alias='Scope')


class ListTagsForResourceRequest(BaseModel):
    Limit: Optional[PaginationLimit] = None
    NextMarker_1: Optional[NextMarker] = Field(None, alias='NextMarker')
    ResourceARN: ResourceArn


class ListWebACLsRequest(BaseModel):
    Limit: Optional[PaginationLimit] = None
    NextMarker_1: Optional[NextMarker] = Field(None, alias='NextMarker')
    Scope_1: Scope = Field(..., alias='Scope')


class LogDestinationConfigs(RootModel[List[ResourceArn]]):
    root: List[ResourceArn] = Field(..., max_length=100, min_length=1)


class LoggingFilter(BaseModel):
    DefaultBehavior: FilterBehavior
    Filters_1: Filters = Field(..., alias='Filters')


class ManagedRuleGroupSummary(BaseModel):
    Description: Optional[EntityDescription] = None
    Name: Optional[EntityName] = None
    VendorName_1: Optional[VendorName] = Field(None, alias='VendorName')
    VersioningSupported: Optional[Boolean] = None


class ManagedRuleGroupVersion(BaseModel):
    LastUpdateTimestamp: Optional[Timestamp] = None
    Name: Optional[VersionKeyString] = None


class ManagedRuleGroupVersions(RootModel[List[ManagedRuleGroupVersion]]):
    root: List[ManagedRuleGroupVersion]


class ManagedRuleSetSummary(BaseModel):
    ARN: Optional[ResourceArn] = None
    Description: Optional[EntityDescription] = None
    Id: Optional[EntityId] = None
    LabelNamespace: Optional[LabelName] = None
    LockToken_1: Optional[LockToken] = Field(None, alias='LockToken')
    Name: Optional[EntityName] = None


class ManagedRuleSetVersion(BaseModel):
    AssociatedRuleGroupArn: Optional[ResourceArn] = None
    Capacity: Optional[CapacityUnit] = None
    ExpiryTimestamp: Optional[Timestamp] = None
    ForecastedLifetime: Optional[TimeWindowDay] = None
    LastUpdateTimestamp: Optional[Timestamp] = None
    PublishTimestamp: Optional[Timestamp] = None


class PublishedVersions(RootModel[Optional[Dict[str, ManagedRuleSetVersion]]]):
    root: Optional[Dict[str, ManagedRuleSetVersion]] = None


class PutManagedRuleSetVersionsRequest(BaseModel):
    Id: EntityId
    LockToken_1: LockToken = Field(..., alias='LockToken')
    Name: EntityName
    RecommendedVersion: Optional[VersionKeyString] = None
    Scope_1: Scope = Field(..., alias='Scope')
    VersionsToPublish_1: Optional[VersionsToPublish] = Field(
        None, alias='VersionsToPublish'
    )


class PutPermissionPolicyRequest(BaseModel):
    Policy: PolicyString
    ResourceArn_1: ResourceArn = Field(..., alias='ResourceArn')


class Regex(BaseModel):
    RegexString: Optional[RegexPatternString] = None


class RegexPatternSetSummary(BaseModel):
    ARN: Optional[ResourceArn] = None
    Description: Optional[EntityDescription] = None
    Id: Optional[EntityId] = None
    LockToken_1: Optional[LockToken] = Field(None, alias='LockToken')
    Name: Optional[EntityName] = None


class RegularExpressionList(RootModel[List[Regex]]):
    root: List[Regex]


class ReleaseSummary(BaseModel):
    ReleaseVersion: Optional[VersionKeyString] = None
    Timestamp_1: Optional[Timestamp] = Field(None, alias='Timestamp')


class RequestBodyAssociatedResourceTypeConfig(BaseModel):
    DefaultSizeInspectionLimit: SizeInspectionLimit


class RequestInspection(BaseModel):
    PasswordField_1: PasswordField = Field(..., alias='PasswordField')
    PayloadType_1: PayloadType = Field(..., alias='PayloadType')
    UsernameField_1: UsernameField = Field(..., alias='UsernameField')


class ResponseInspectionBodyContainsSuccessStrings(RootModel[List[SuccessValue]]):
    root: List[SuccessValue] = Field(..., max_length=5, min_length=1)


class ResponseInspectionHeaderSuccessValues(RootModel[List[SuccessValue]]):
    root: List[SuccessValue] = Field(..., max_length=3, min_length=1)


class ResponseInspectionJsonSuccessValues(RootModel[List[SuccessValue]]):
    root: List[SuccessValue] = Field(..., max_length=5, min_length=1)


class ResponseInspectionStatusCodeSuccessCodes(RootModel[List[SuccessCode]]):
    root: List[SuccessCode] = Field(..., max_length=10, min_length=1)


class RuleGroupSummaries(RootModel[List[RuleGroupSummary]]):
    root: List[RuleGroupSummary]


class SampledHTTPRequest(BaseModel):
    Action_1: Optional[Action] = Field(None, alias='Action')
    CaptchaResponse_1: Optional[CaptchaResponse] = Field(None, alias='CaptchaResponse')
    ChallengeResponse_1: Optional[ChallengeResponse] = Field(
        None, alias='ChallengeResponse'
    )
    Labels_1: Optional[Labels] = Field(None, alias='Labels')
    OverriddenAction: Optional[Action] = None
    Request: HTTPRequest
    RequestHeadersInserted: Optional[HTTPHeaders] = None
    ResponseCodeSent: Optional[ResponseStatusCode] = None
    RuleNameWithinRuleGroup: Optional[EntityName] = None
    Timestamp_1: Optional[Timestamp] = Field(None, alias='Timestamp')
    Weight: SampleWeight


class SampledHTTPRequests(RootModel[List[SampledHTTPRequest]]):
    root: List[SampledHTTPRequest]


class Tag(BaseModel):
    Key: TagKey
    Value: TagValue


class TagList(RootModel[List[Tag]]):
    root: List[Tag] = Field(..., min_length=1)


class TagResourceRequest(BaseModel):
    ResourceARN: ResourceArn
    Tags: TagList


class TextTransformation(BaseModel):
    Priority: TextTransformationPriority
    Type: TextTransformationType


class TextTransformations(RootModel[List[TextTransformation]]):
    root: List[TextTransformation] = Field(..., min_length=1)


class TimeWindow(BaseModel):
    EndTime: Timestamp
    StartTime: Timestamp


class UpdateManagedRuleSetVersionExpiryDateRequest(BaseModel):
    ExpiryTimestamp: Timestamp
    Id: EntityId
    LockToken_1: LockToken = Field(..., alias='LockToken')
    Name: EntityName
    Scope_1: Scope = Field(..., alias='Scope')
    VersionToExpire: VersionKeyString


class UpdateManagedRuleSetVersionExpiryDateResponse(BaseModel):
    ExpiringVersion: Optional[VersionKeyString] = None
    ExpiryTimestamp: Optional[Timestamp] = None
    NextLockToken: Optional[LockToken] = None


class UpdateRegexPatternSetRequest(BaseModel):
    Description: Optional[EntityDescription] = None
    Id: EntityId
    LockToken_1: LockToken = Field(..., alias='LockToken')
    Name: EntityName
    RegularExpressionList_1: RegularExpressionList = Field(
        ..., alias='RegularExpressionList'
    )
    Scope_1: Scope = Field(..., alias='Scope')


class WebACLSummaries(RootModel[List[WebACLSummary]]):
    root: List[WebACLSummary]


class APIKeySummaries(RootModel[List[APIKeySummary]]):
    root: List[APIKeySummary]


class AllowAction(BaseModel):
    CustomRequestHandling_1: Optional[CustomRequestHandling] = Field(
        None, alias='CustomRequestHandling'
    )


class BlockAction(BaseModel):
    CustomResponse_1: Optional[CustomResponse] = Field(None, alias='CustomResponse')


class CaptchaAction(BaseModel):
    CustomRequestHandling_1: Optional[CustomRequestHandling] = Field(
        None, alias='CustomRequestHandling'
    )


class CaptchaConfig(BaseModel):
    ImmunityTimeProperty_1: Optional[ImmunityTimeProperty] = Field(
        None, alias='ImmunityTimeProperty'
    )


class ChallengeAction(BaseModel):
    CustomRequestHandling_1: Optional[CustomRequestHandling] = Field(
        None, alias='CustomRequestHandling'
    )


class ChallengeConfig(BaseModel):
    ImmunityTimeProperty_1: Optional[ImmunityTimeProperty] = Field(
        None, alias='ImmunityTimeProperty'
    )


class CookieMatchPattern(BaseModel):
    All_1: Optional[All] = Field(None, alias='All')
    ExcludedCookies: Optional[CookieNames] = None
    IncludedCookies: Optional[CookieNames] = None


class Cookies(BaseModel):
    MatchPattern: CookieMatchPattern
    MatchScope: MapMatchScope
    OversizeHandling_1: OversizeHandling = Field(..., alias='OversizeHandling')


class CountAction(BaseModel):
    CustomRequestHandling_1: Optional[CustomRequestHandling] = Field(
        None, alias='CustomRequestHandling'
    )


class CreateIPSetRequest(BaseModel):
    Addresses: IPAddresses
    Description: Optional[EntityDescription] = None
    IPAddressVersion_1: IPAddressVersion = Field(..., alias='IPAddressVersion')
    Name: EntityName
    Scope_1: Scope = Field(..., alias='Scope')
    Tags: Optional[TagList] = None


class CreateIPSetResponse(BaseModel):
    Summary: Optional[IPSetSummary] = None


class CreateRegexPatternSetRequest(BaseModel):
    Description: Optional[EntityDescription] = None
    Name: EntityName
    RegularExpressionList_1: RegularExpressionList = Field(
        ..., alias='RegularExpressionList'
    )
    Scope_1: Scope = Field(..., alias='Scope')
    Tags: Optional[TagList] = None


class CreateRegexPatternSetResponse(BaseModel):
    Summary: Optional[RegexPatternSetSummary] = None


class CustomResponseBodies(RootModel[Optional[Dict[str, CustomResponseBody]]]):
    root: Optional[Dict[str, CustomResponseBody]] = None


class DefaultAction(BaseModel):
    Allow: Optional[AllowAction] = None
    Block: Optional[BlockAction] = None


class GetIPSetResponse(BaseModel):
    IPSet_1: Optional[IPSet] = Field(None, alias='IPSet')
    LockToken_1: Optional[LockToken] = Field(None, alias='LockToken')


class GetSampledRequestsRequest(BaseModel):
    MaxItems: ListMaxItems
    RuleMetricName: MetricName
    Scope_1: Scope = Field(..., alias='Scope')
    TimeWindow_1: TimeWindow = Field(..., alias='TimeWindow')
    WebAclArn: ResourceArn


class GetSampledRequestsResponse(BaseModel):
    PopulationSize_1: Optional[PopulationSize] = Field(None, alias='PopulationSize')
    SampledRequests: Optional[SampledHTTPRequests] = None
    TimeWindow_1: Optional[TimeWindow] = Field(None, alias='TimeWindow')


class IPSetSummaries(RootModel[List[IPSetSummary]]):
    root: List[IPSetSummary]


class JsonBody(BaseModel):
    InvalidFallbackBehavior: Optional[BodyParsingFallbackBehavior] = None
    MatchPattern: JsonMatchPattern
    MatchScope: JsonMatchScope
    OversizeHandling_1: Optional[OversizeHandling] = Field(
        None, alias='OversizeHandling'
    )


class ListAPIKeysResponse(BaseModel):
    APIKeySummaries_1: Optional[APIKeySummaries] = Field(None, alias='APIKeySummaries')
    ApplicationIntegrationURL: Optional[OutputUrl] = None
    NextMarker_1: Optional[NextMarker] = Field(None, alias='NextMarker')


class ListAvailableManagedRuleGroupVersionsResponse(BaseModel):
    CurrentDefaultVersion: Optional[VersionKeyString] = None
    NextMarker_1: Optional[NextMarker] = Field(None, alias='NextMarker')
    Versions: Optional[ManagedRuleGroupVersions] = None


class ListIPSetsResponse(BaseModel):
    IPSets: Optional[IPSetSummaries] = None
    NextMarker_1: Optional[NextMarker] = Field(None, alias='NextMarker')


class ListRuleGroupsResponse(BaseModel):
    NextMarker_1: Optional[NextMarker] = Field(None, alias='NextMarker')
    RuleGroups: Optional[RuleGroupSummaries] = None


class ListWebACLsResponse(BaseModel):
    NextMarker_1: Optional[NextMarker] = Field(None, alias='NextMarker')
    WebACLs: Optional[WebACLSummaries] = None


class ManagedRuleGroupSummaries(RootModel[List[ManagedRuleGroupSummary]]):
    root: List[ManagedRuleGroupSummary]


class ManagedRuleSet(BaseModel):
    ARN: ResourceArn
    Description: Optional[EntityDescription] = None
    Id: EntityId
    LabelNamespace: Optional[LabelName] = None
    Name: EntityName
    PublishedVersions_1: Optional[PublishedVersions] = Field(
        None, alias='PublishedVersions'
    )
    RecommendedVersion: Optional[VersionKeyString] = None


class ManagedRuleSetSummaries(RootModel[List[ManagedRuleSetSummary]]):
    root: List[ManagedRuleSetSummary]


class MobileSdkRelease(BaseModel):
    ReleaseNotes_1: Optional[ReleaseNotes] = Field(None, alias='ReleaseNotes')
    ReleaseVersion: Optional[VersionKeyString] = None
    Tags: Optional[TagList] = None
    Timestamp_1: Optional[Timestamp] = Field(None, alias='Timestamp')


class OverrideAction(BaseModel):
    Count: Optional[CountAction] = None
    None_: Optional[NoneAction] = Field(None, alias='None')


class RegexPatternSet(BaseModel):
    ARN: Optional[ResourceArn] = None
    Description: Optional[EntityDescription] = None
    Id: Optional[EntityId] = None
    Name: Optional[EntityName] = None
    RegularExpressionList_1: Optional[RegularExpressionList] = Field(
        None, alias='RegularExpressionList'
    )


class RegexPatternSetSummaries(RootModel[List[RegexPatternSetSummary]]):
    root: List[RegexPatternSetSummary]


class ReleaseSummaries(RootModel[List[ReleaseSummary]]):
    root: List[ReleaseSummary]


class RequestBody(
    RootModel[Optional[Dict[str, RequestBodyAssociatedResourceTypeConfig]]]
):
    root: Optional[Dict[str, RequestBodyAssociatedResourceTypeConfig]] = None


class ResponseInspectionBodyContains(BaseModel):
    FailureStrings: ResponseInspectionBodyContainsFailureStrings
    SuccessStrings: ResponseInspectionBodyContainsSuccessStrings


class ResponseInspectionHeader(BaseModel):
    FailureValues: ResponseInspectionHeaderFailureValues
    Name: ResponseInspectionHeaderName
    SuccessValues: ResponseInspectionHeaderSuccessValues


class ResponseInspectionJson(BaseModel):
    FailureValues: ResponseInspectionJsonFailureValues
    Identifier: FieldIdentifier
    SuccessValues: ResponseInspectionJsonSuccessValues


class ResponseInspectionStatusCode(BaseModel):
    FailureCodes: ResponseInspectionStatusCodeFailureCodes
    SuccessCodes: ResponseInspectionStatusCodeSuccessCodes


class RuleAction(BaseModel):
    Allow: Optional[AllowAction] = None
    Block: Optional[BlockAction] = None
    Captcha: Optional[CaptchaAction] = None
    Challenge: Optional[ChallengeAction] = None
    Count: Optional[CountAction] = None


class RuleActionOverride(BaseModel):
    ActionToUse: RuleAction
    Name: EntityName


class RuleActionOverrides(RootModel[List[RuleActionOverride]]):
    root: List[RuleActionOverride] = Field(..., max_length=100, min_length=1)


class RuleGroupReferenceStatement(BaseModel):
    ARN: ResourceArn
    ExcludedRules_1: Optional[ExcludedRules] = Field(None, alias='ExcludedRules')
    RuleActionOverrides_1: Optional[RuleActionOverrides] = Field(
        None, alias='RuleActionOverrides'
    )


class RuleSummary(BaseModel):
    Action: Optional[RuleAction] = None
    Name: Optional[EntityName] = None


class TagInfoForResource(BaseModel):
    ResourceARN: Optional[ResourceArn] = None
    TagList_1: Optional[TagList] = Field(None, alias='TagList')


class AssociationConfig(BaseModel):
    RequestBody_1: Optional[RequestBody] = Field(None, alias='RequestBody')


class FieldToMatch(BaseModel):
    AllQueryArguments_1: Optional[AllQueryArguments] = Field(
        None, alias='AllQueryArguments'
    )
    Body_1: Optional[Body] = Field(None, alias='Body')
    Cookies_1: Optional[Cookies] = Field(None, alias='Cookies')
    Headers_1: Optional[Headers] = Field(None, alias='Headers')
    JsonBody_1: Optional[JsonBody] = Field(None, alias='JsonBody')
    Method_1: Optional[Method] = Field(None, alias='Method')
    QueryString_1: Optional[QueryString] = Field(None, alias='QueryString')
    SingleHeader_1: Optional[SingleHeader] = Field(None, alias='SingleHeader')
    SingleQueryArgument_1: Optional[SingleQueryArgument] = Field(
        None, alias='SingleQueryArgument'
    )
    UriPath_1: Optional[UriPath] = Field(None, alias='UriPath')


class GetManagedRuleSetResponse(BaseModel):
    LockToken_1: Optional[LockToken] = Field(None, alias='LockToken')
    ManagedRuleSet_1: Optional[ManagedRuleSet] = Field(None, alias='ManagedRuleSet')


class GetMobileSdkReleaseResponse(BaseModel):
    MobileSdkRelease_1: Optional[MobileSdkRelease] = Field(
        None, alias='MobileSdkRelease'
    )


class GetRegexPatternSetResponse(BaseModel):
    LockToken_1: Optional[LockToken] = Field(None, alias='LockToken')
    RegexPatternSet_1: Optional[RegexPatternSet] = Field(None, alias='RegexPatternSet')


class ListAvailableManagedRuleGroupsResponse(BaseModel):
    ManagedRuleGroups: Optional[ManagedRuleGroupSummaries] = None
    NextMarker_1: Optional[NextMarker] = Field(None, alias='NextMarker')


class ListManagedRuleSetsResponse(BaseModel):
    ManagedRuleSets: Optional[ManagedRuleSetSummaries] = None
    NextMarker_1: Optional[NextMarker] = Field(None, alias='NextMarker')


class ListMobileSdkReleasesResponse(BaseModel):
    NextMarker_1: Optional[NextMarker] = Field(None, alias='NextMarker')
    ReleaseSummaries_1: Optional[ReleaseSummaries] = Field(
        None, alias='ReleaseSummaries'
    )


class ListRegexPatternSetsResponse(BaseModel):
    NextMarker_1: Optional[NextMarker] = Field(None, alias='NextMarker')
    RegexPatternSets: Optional[RegexPatternSetSummaries] = None


class ListTagsForResourceResponse(BaseModel):
    NextMarker_1: Optional[NextMarker] = Field(None, alias='NextMarker')
    TagInfoForResource_1: Optional[TagInfoForResource] = Field(
        None, alias='TagInfoForResource'
    )


class RedactedFields(RootModel[List[FieldToMatch]]):
    root: List[FieldToMatch] = Field(..., max_length=100)


class RegexMatchStatement(BaseModel):
    FieldToMatch_1: FieldToMatch = Field(..., alias='FieldToMatch')
    RegexString: RegexPatternString
    TextTransformations_1: TextTransformations = Field(..., alias='TextTransformations')


class RegexPatternSetReferenceStatement(BaseModel):
    ARN: ResourceArn
    FieldToMatch_1: FieldToMatch = Field(..., alias='FieldToMatch')
    TextTransformations_1: TextTransformations = Field(..., alias='TextTransformations')


class ResponseInspection(BaseModel):
    BodyContains: Optional[ResponseInspectionBodyContains] = None
    Header: Optional[ResponseInspectionHeader] = None
    Json: Optional[ResponseInspectionJson] = None
    StatusCode: Optional[ResponseInspectionStatusCode] = None


class RuleSummaries(RootModel[List[RuleSummary]]):
    root: List[RuleSummary]


class SizeConstraintStatement(BaseModel):
    ComparisonOperator_1: ComparisonOperator = Field(..., alias='ComparisonOperator')
    FieldToMatch_1: FieldToMatch = Field(..., alias='FieldToMatch')
    Size_1: Size = Field(..., alias='Size')
    TextTransformations_1: TextTransformations = Field(..., alias='TextTransformations')


class SqliMatchStatement(BaseModel):
    FieldToMatch_1: FieldToMatch = Field(..., alias='FieldToMatch')
    SensitivityLevel_1: Optional[SensitivityLevel] = Field(
        None, alias='SensitivityLevel'
    )
    TextTransformations_1: TextTransformations = Field(..., alias='TextTransformations')


class XssMatchStatement(BaseModel):
    FieldToMatch_1: FieldToMatch = Field(..., alias='FieldToMatch')
    TextTransformations_1: TextTransformations = Field(..., alias='TextTransformations')


class AWSManagedRulesATPRuleSet(BaseModel):
    LoginPath: String
    RequestInspection_1: Optional[RequestInspection] = Field(
        None, alias='RequestInspection'
    )
    ResponseInspection_1: Optional[ResponseInspection] = Field(
        None, alias='ResponseInspection'
    )


class ByteMatchStatement(BaseModel):
    FieldToMatch_1: FieldToMatch = Field(..., alias='FieldToMatch')
    PositionalConstraint_1: PositionalConstraint = Field(
        ..., alias='PositionalConstraint'
    )
    SearchString_1: SearchString = Field(..., alias='SearchString')
    TextTransformations_1: TextTransformations = Field(..., alias='TextTransformations')


class DescribeManagedRuleGroupResponse(BaseModel):
    AvailableLabels: Optional[LabelSummaries] = None
    Capacity: Optional[CapacityUnit] = None
    ConsumedLabels: Optional[LabelSummaries] = None
    LabelNamespace: Optional[LabelName] = None
    Rules: Optional[RuleSummaries] = None
    SnsTopicArn: Optional[ResourceArn] = None
    VersionName: Optional[VersionKeyString] = None


class LoggingConfiguration(BaseModel):
    LogDestinationConfigs_1: LogDestinationConfigs = Field(
        ..., alias='LogDestinationConfigs'
    )
    LoggingFilter_1: Optional[LoggingFilter] = Field(None, alias='LoggingFilter')
    ManagedByFirewallManager: Optional[Boolean] = None
    RedactedFields_1: Optional[RedactedFields] = Field(None, alias='RedactedFields')
    ResourceArn_1: ResourceArn = Field(..., alias='ResourceArn')


class LoggingConfigurations(RootModel[List[LoggingConfiguration]]):
    root: List[LoggingConfiguration]


class ManagedRuleGroupConfig(BaseModel):
    AWSManagedRulesATPRuleSet_1: Optional[AWSManagedRulesATPRuleSet] = Field(
        None, alias='AWSManagedRulesATPRuleSet'
    )
    AWSManagedRulesBotControlRuleSet_1: Optional[AWSManagedRulesBotControlRuleSet] = (
        Field(None, alias='AWSManagedRulesBotControlRuleSet')
    )
    LoginPath: Optional[LoginPathString] = None
    PasswordField_1: Optional[PasswordField] = Field(None, alias='PasswordField')
    PayloadType_1: Optional[PayloadType] = Field(None, alias='PayloadType')
    UsernameField_1: Optional[UsernameField] = Field(None, alias='UsernameField')


class ManagedRuleGroupConfigs(RootModel[List[ManagedRuleGroupConfig]]):
    root: List[ManagedRuleGroupConfig]


class PutLoggingConfigurationRequest(BaseModel):
    LoggingConfiguration_1: LoggingConfiguration = Field(
        ..., alias='LoggingConfiguration'
    )


class PutLoggingConfigurationResponse(BaseModel):
    LoggingConfiguration_1: Optional[LoggingConfiguration] = Field(
        None, alias='LoggingConfiguration'
    )


class GetLoggingConfigurationResponse(BaseModel):
    LoggingConfiguration_1: Optional[LoggingConfiguration] = Field(
        None, alias='LoggingConfiguration'
    )


class ListLoggingConfigurationsResponse(BaseModel):
    LoggingConfigurations_1: Optional[LoggingConfigurations] = Field(
        None, alias='LoggingConfigurations'
    )
    NextMarker_1: Optional[NextMarker] = Field(None, alias='NextMarker')


class AndStatement(BaseModel):
    Statements_1: Statements = Field(..., alias='Statements')


class CheckCapacityRequest(BaseModel):
    Rules_1: Rules = Field(..., alias='Rules')
    Scope_1: Scope = Field(..., alias='Scope')


class CreateRuleGroupRequest(BaseModel):
    Capacity: CapacityUnit
    CustomResponseBodies_1: Optional[CustomResponseBodies] = Field(
        None, alias='CustomResponseBodies'
    )
    Description: Optional[EntityDescription] = None
    Name: EntityName
    Rules_1: Optional[Rules] = Field(None, alias='Rules')
    Scope_1: Scope = Field(..., alias='Scope')
    Tags: Optional[TagList] = None
    VisibilityConfig_1: VisibilityConfig = Field(..., alias='VisibilityConfig')


class CreateWebACLRequest(BaseModel):
    AssociationConfig_1: Optional[AssociationConfig] = Field(
        None, alias='AssociationConfig'
    )
    CaptchaConfig_1: Optional[CaptchaConfig] = Field(None, alias='CaptchaConfig')
    ChallengeConfig_1: Optional[ChallengeConfig] = Field(None, alias='ChallengeConfig')
    CustomResponseBodies_1: Optional[CustomResponseBodies] = Field(
        None, alias='CustomResponseBodies'
    )
    DefaultAction_1: DefaultAction = Field(..., alias='DefaultAction')
    Description: Optional[EntityDescription] = None
    Name: EntityName
    Rules_1: Optional[Rules] = Field(None, alias='Rules')
    Scope_1: Scope = Field(..., alias='Scope')
    Tags: Optional[TagList] = None
    TokenDomains_1: Optional[TokenDomains] = Field(None, alias='TokenDomains')
    VisibilityConfig_1: VisibilityConfig = Field(..., alias='VisibilityConfig')


class FirewallManagerRuleGroup(BaseModel):
    FirewallManagerStatement_1: FirewallManagerStatement = Field(
        ..., alias='FirewallManagerStatement'
    )
    Name: EntityName
    OverrideAction_1: OverrideAction = Field(..., alias='OverrideAction')
    Priority: RulePriority
    VisibilityConfig_1: VisibilityConfig = Field(..., alias='VisibilityConfig')


class FirewallManagerRuleGroups(RootModel[List[FirewallManagerRuleGroup]]):
    root: List[FirewallManagerRuleGroup]


class FirewallManagerStatement(BaseModel):
    ManagedRuleGroupStatement_1: Optional[ManagedRuleGroupStatement] = Field(
        None, alias='ManagedRuleGroupStatement'
    )
    RuleGroupReferenceStatement_1: Optional[RuleGroupReferenceStatement] = Field(
        None, alias='RuleGroupReferenceStatement'
    )


class GetRuleGroupResponse(BaseModel):
    LockToken_1: Optional[LockToken] = Field(None, alias='LockToken')
    RuleGroup_1: Optional[RuleGroup] = Field(None, alias='RuleGroup')


class GetWebACLForResourceResponse(BaseModel):
    WebACL_1: Optional[WebACL] = Field(None, alias='WebACL')


class GetWebACLResponse(BaseModel):
    ApplicationIntegrationURL: Optional[OutputUrl] = None
    LockToken_1: Optional[LockToken] = Field(None, alias='LockToken')
    WebACL_1: Optional[WebACL] = Field(None, alias='WebACL')


class ManagedRuleGroupStatement(BaseModel):
    ExcludedRules_1: Optional[ExcludedRules] = Field(None, alias='ExcludedRules')
    ManagedRuleGroupConfigs_1: Optional[ManagedRuleGroupConfigs] = Field(
        None, alias='ManagedRuleGroupConfigs'
    )
    Name: EntityName
    RuleActionOverrides_1: Optional[RuleActionOverrides] = Field(
        None, alias='RuleActionOverrides'
    )
    ScopeDownStatement: Optional[Statement] = None
    VendorName_1: VendorName = Field(..., alias='VendorName')
    Version: Optional[VersionKeyString] = None


class NotStatement(BaseModel):
    Statement_1: Statement = Field(..., alias='Statement')


class OrStatement(BaseModel):
    Statements_1: Statements = Field(..., alias='Statements')


class RateBasedStatement(BaseModel):
    AggregateKeyType: RateBasedStatementAggregateKeyType
    ForwardedIPConfig_1: Optional[ForwardedIPConfig] = Field(
        None, alias='ForwardedIPConfig'
    )
    Limit: RateLimit
    ScopeDownStatement: Optional[Statement] = None


class Rule(BaseModel):
    Action: Optional[RuleAction] = None
    CaptchaConfig_1: Optional[CaptchaConfig] = Field(None, alias='CaptchaConfig')
    ChallengeConfig_1: Optional[ChallengeConfig] = Field(None, alias='ChallengeConfig')
    Name: EntityName
    OverrideAction_1: Optional[OverrideAction] = Field(None, alias='OverrideAction')
    Priority: RulePriority
    RuleLabels: Optional[Labels] = None
    Statement_1: Statement = Field(..., alias='Statement')
    VisibilityConfig_1: VisibilityConfig = Field(..., alias='VisibilityConfig')


class RuleGroup(BaseModel):
    ARN: ResourceArn
    AvailableLabels: Optional[LabelSummaries] = None
    Capacity: CapacityUnit
    ConsumedLabels: Optional[LabelSummaries] = None
    CustomResponseBodies_1: Optional[CustomResponseBodies] = Field(
        None, alias='CustomResponseBodies'
    )
    Description: Optional[EntityDescription] = None
    Id: EntityId
    LabelNamespace: Optional[LabelName] = None
    Name: EntityName
    Rules_1: Optional[Rules] = Field(None, alias='Rules')
    VisibilityConfig_1: VisibilityConfig = Field(..., alias='VisibilityConfig')


class Rules(RootModel[List[Rule]]):
    root: List[Rule]


class Statement(BaseModel):
    AndStatement_1: Optional[AndStatement] = Field(None, alias='AndStatement')
    ByteMatchStatement_1: Optional[ByteMatchStatement] = Field(
        None, alias='ByteMatchStatement'
    )
    GeoMatchStatement_1: Optional[GeoMatchStatement] = Field(
        None, alias='GeoMatchStatement'
    )
    IPSetReferenceStatement_1: Optional[IPSetReferenceStatement] = Field(
        None, alias='IPSetReferenceStatement'
    )
    LabelMatchStatement_1: Optional[LabelMatchStatement] = Field(
        None, alias='LabelMatchStatement'
    )
    ManagedRuleGroupStatement_1: Optional[ManagedRuleGroupStatement] = Field(
        None, alias='ManagedRuleGroupStatement'
    )
    NotStatement_1: Optional[NotStatement] = Field(None, alias='NotStatement')
    OrStatement_1: Optional[OrStatement] = Field(None, alias='OrStatement')
    RateBasedStatement_1: Optional[RateBasedStatement] = Field(
        None, alias='RateBasedStatement'
    )
    RegexMatchStatement_1: Optional[RegexMatchStatement] = Field(
        None, alias='RegexMatchStatement'
    )
    RegexPatternSetReferenceStatement_1: Optional[RegexPatternSetReferenceStatement] = (
        Field(None, alias='RegexPatternSetReferenceStatement')
    )
    RuleGroupReferenceStatement_1: Optional[RuleGroupReferenceStatement] = Field(
        None, alias='RuleGroupReferenceStatement'
    )
    SizeConstraintStatement_1: Optional[SizeConstraintStatement] = Field(
        None, alias='SizeConstraintStatement'
    )
    SqliMatchStatement_1: Optional[SqliMatchStatement] = Field(
        None, alias='SqliMatchStatement'
    )
    XssMatchStatement_1: Optional[XssMatchStatement] = Field(
        None, alias='XssMatchStatement'
    )


class Statements(RootModel[List[Statement]]):
    root: List[Statement]


class UpdateRuleGroupRequest(BaseModel):
    CustomResponseBodies_1: Optional[CustomResponseBodies] = Field(
        None, alias='CustomResponseBodies'
    )
    Description: Optional[EntityDescription] = None
    Id: EntityId
    LockToken_1: LockToken = Field(..., alias='LockToken')
    Name: EntityName
    Rules_1: Optional[Rules] = Field(None, alias='Rules')
    Scope_1: Scope = Field(..., alias='Scope')
    VisibilityConfig_1: VisibilityConfig = Field(..., alias='VisibilityConfig')


class UpdateWebACLRequest(BaseModel):
    AssociationConfig_1: Optional[AssociationConfig] = Field(
        None, alias='AssociationConfig'
    )
    CaptchaConfig_1: Optional[CaptchaConfig] = Field(None, alias='CaptchaConfig')
    ChallengeConfig_1: Optional[ChallengeConfig] = Field(None, alias='ChallengeConfig')
    CustomResponseBodies_1: Optional[CustomResponseBodies] = Field(
        None, alias='CustomResponseBodies'
    )
    DefaultAction_1: DefaultAction = Field(..., alias='DefaultAction')
    Description: Optional[EntityDescription] = None
    Id: EntityId
    LockToken_1: LockToken = Field(..., alias='LockToken')
    Name: EntityName
    Rules_1: Optional[Rules] = Field(None, alias='Rules')
    Scope_1: Scope = Field(..., alias='Scope')
    TokenDomains_1: Optional[TokenDomains] = Field(None, alias='TokenDomains')
    VisibilityConfig_1: VisibilityConfig = Field(..., alias='VisibilityConfig')


class WebACL(BaseModel):
    ARN: ResourceArn
    AssociationConfig_1: Optional[AssociationConfig] = Field(
        None, alias='AssociationConfig'
    )
    Capacity: Optional[ConsumedCapacity] = None
    CaptchaConfig_1: Optional[CaptchaConfig] = Field(None, alias='CaptchaConfig')
    ChallengeConfig_1: Optional[ChallengeConfig] = Field(None, alias='ChallengeConfig')
    CustomResponseBodies_1: Optional[CustomResponseBodies] = Field(
        None, alias='CustomResponseBodies'
    )
    DefaultAction_1: DefaultAction = Field(..., alias='DefaultAction')
    Description: Optional[EntityDescription] = None
    Id: EntityId
    LabelNamespace: Optional[LabelName] = None
    ManagedByFirewallManager: Optional[Boolean] = None
    Name: EntityName
    PostProcessFirewallManagerRuleGroups: Optional[FirewallManagerRuleGroups] = None
    PreProcessFirewallManagerRuleGroups: Optional[FirewallManagerRuleGroups] = None
    Rules_1: Optional[Rules] = Field(None, alias='Rules')
    TokenDomains_1: Optional[TokenDomains] = Field(None, alias='TokenDomains')
    VisibilityConfig_1: VisibilityConfig = Field(..., alias='VisibilityConfig')


AndStatement.model_rebuild()
CheckCapacityRequest.model_rebuild()
CreateRuleGroupRequest.model_rebuild()
CreateWebACLRequest.model_rebuild()
FirewallManagerRuleGroup.model_rebuild()
FirewallManagerStatement.model_rebuild()
GetRuleGroupResponse.model_rebuild()
GetWebACLForResourceResponse.model_rebuild()
GetWebACLResponse.model_rebuild()
ManagedRuleGroupStatement.model_rebuild()
NotStatement.model_rebuild()
OrStatement.model_rebuild()
RateBasedStatement.model_rebuild()
Rule.model_rebuild()
RuleGroup.model_rebuild()
